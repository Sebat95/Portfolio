/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: OPREXT (https://sketchfab.com/OPREXT)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/vfx-explosion-724a9505d9974fca9e9cdac6e52e6f2f
Title: Vfx Explosion
*/

import { useGLTF } from '@react-three/drei';
import { GroupProps } from '@react-three/fiber';
import { BufferGeometry, Group, Mesh, Object3DEventMap } from 'three';
import {useGSAP} from '@gsap/react';
import gsap from 'gsap';
import { RefObject, useRef, useState } from 'react';
import { explosionDuration } from '../constants/general';


const Explosion = (props: GroupProps) => {
  const { nodes, materials } = useGLTF('/models/vfx_explosion.glb');
  const innerRef = useRef<Mesh<BufferGeometry>>();
  const outerRef = useRef<Mesh<BufferGeometry>>();
  const globalRef = useRef<Group<Object3DEventMap>>();
  const [hovering, setHovering] = useState(false);
  const [tweenOut, setTweenOut] = useState({});
  const [tweenIn, setTweenIn] = useState({});

  useGSAP(() => {
    if(innerRef.current) {
      gsap.timeline({repeat: -1})
        .to(innerRef.current.rotation, {
          y: `+=${Math.PI * 2}`,
          x: `+=${Math.PI * 2}`,
          z: `+=${Math.PI * 2}`,
          ease: "none", 
          duration: 2.5
      });
      if(outerRef.current) {
        gsap.timeline({repeat: -1})
          .to(outerRef.current.rotation, {
            y: `-=${Math.PI * 2}`,
            x: `-=${Math.PI * 2}`,
            z: `-=${Math.PI * 2}`,
            ease: "none", 
            duration: 2.5
        });
      }
    }
  })

  useGSAP(() => {
    if (globalRef.current) {
      if(hovering) {
        gsap.killTweensOf(tweenOut);
        setTweenIn(gsap.to(globalRef.current.scale, {
          y: hovering ? `7` : `1`,
          x: hovering ? `7` : `1`,
          z: hovering ? `7` : `1`,
          duration: explosionDuration
        }));
      } else {
        gsap.killTweensOf(tweenIn);
        setTweenOut(gsap.to(globalRef.current.scale, {
          y: hovering ? `7` : `1`,
          x: hovering ? `7` : `1`,
          z: hovering ? `7` : `1`,
          duration: explosionDuration
        }));
      }
    }
  }, {
    dependencies: [hovering]
  });

  return (
    <group {...props} dispose={null}
    onPointerEnter={() => setHovering(true)}
    onPointerLeave={() => setHovering(false)}>
      <group ref={globalRef as RefObject<Group<Object3DEventMap>>}
        position={[0.02197045, 0.10402713, -0.04289045]}
        rotation={[-2.09475399, -0.45316825, -2.71997209]}
        scale={0.4}>
          <mesh ref={outerRef as RefObject<Mesh<BufferGeometry>>} geometry={(nodes.Object_4 as Mesh).geometry} material={materials.material_0} />
          <mesh ref={innerRef as RefObject<Mesh<BufferGeometry>>} geometry={(nodes.Object_5 as Mesh).geometry} material={materials.material_0} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/vfx_explosion.glb')

export default Explosion
