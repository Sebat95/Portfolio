/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: OPREXT (https://sketchfab.com/OPREXT)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/vfx-explosion-724a9505d9974fca9e9cdac6e52e6f2f
Title: Vfx Explosion
*/

import { useGLTF } from '@react-three/drei';
import { GroupProps } from '@react-three/fiber';
import { BufferGeometry, Group, Mesh, Object3DEventMap } from 'three';
import {useGSAP} from '@gsap/react';
import gsap from 'gsap';
import { RefObject, useRef } from 'react';

interface ExplosionProps extends GroupProps {
  innerRef: RefObject<Group<Object3DEventMap>>
}

const Explosion = (props: ExplosionProps) => {
  const { nodes, materials } = useGLTF('/models/vfx_explosion.glb');
  const innerRef = useRef<Mesh<BufferGeometry>>();
  const outerRef = useRef<Mesh<BufferGeometry>>();
  const globalRef = useRef<Group<Object3DEventMap>>();

  // continuosly spin
  useGSAP(() => {
    if(innerRef.current) {
      gsap.timeline({repeat: -1})
        .to(innerRef.current.rotation, {
          y: `+=${Math.PI * 2}`,
          x: `+=${Math.PI * 2}`,
          z: `+=${Math.PI * 2}`,
          ease: "none", 
          duration: 2.5
      });
      if(outerRef.current) {
        gsap.timeline({repeat: -1})
          .to(outerRef.current.rotation, {
            y: `-=${Math.PI * 2}`,
            x: `-=${Math.PI * 2}`,
            z: `-=${Math.PI * 2}`,
            ease: "none", 
            duration: 2.5
        });
      }
    }
  })

  return (
    <group {...props} dispose={null} ref={props.innerRef}>
        <group ref={globalRef as RefObject<Group<Object3DEventMap>>}
          position={[0.02197045, 0.10402713, -0.04289045]}
          rotation={[-2.09475399, -0.45316825, -2.71997209]}
          scale={1}>
            <mesh ref={outerRef as RefObject<Mesh<BufferGeometry>>} geometry={(nodes.Object_4 as Mesh).geometry} material={materials.material_0} />
            <mesh ref={innerRef as RefObject<Mesh<BufferGeometry>>} geometry={(nodes.Object_5 as Mesh).geometry} material={materials.material_0} />
        </group>
        
    </group>
  )
}

useGLTF.preload('/models/vfx_explosion.glb');

export default Explosion;
